
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009fa  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000697  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047c  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000384  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  64:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#include "ADC_interface.h"

void	ADC_Init	(void)
{
	/*	Enable ADC		*/
	SET_BIT(ADCSRA,7);
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	86 b9       	out	0x06, r24	; 6
	#elif 	V_Ref == AVCC
	SET_BIT(ADMUX,6);	//REFS0 Pin
	CLR_BIT(ADMUX,7);	//REFS1 Pin
	
	#elif 	V_Ref == Internal
	SET_BIT(ADMUX,6);	//REFS0 Pin
  72:	87 b1       	in	r24, 0x07	; 7
  74:	80 64       	ori	r24, 0x40	; 64
  76:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,7);	//REFS1 Pin
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADCSRA,0);	//ADPS0 Pin
	SET_BIT(ADCSRA,1);	//ADPS1 Pin
	SET_BIT(ADCSRA,2);	//ADPS2 Pin

	#elif 	Prescaler == Clock_Div_128
	SET_BIT(ADCSRA,0);	//ADPS0 Pin
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	81 60       	ori	r24, 0x01	; 1
  82:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);	//ADPS1 Pin
  84:	86 b1       	in	r24, 0x06	; 6
  86:	82 60       	ori	r24, 0x02	; 2
  88:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);	//ADPS2 Pin
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	84 60       	ori	r24, 0x04	; 4
  8e:	86 b9       	out	0x06, r24	; 6
	/*	Interrupt Enable 			*/
	#if 	Interrupt == ON
	SET_BIT(ADCSRA,3);	
	
	#elif 	Interrupt == OFF
	CLR_BIT(ADCSRA,3);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	87 7f       	andi	r24, 0xF7	; 247
  94:	86 b9       	out	0x06, r24	; 6
	#else
	#error	"Wrong Choice of ADC Interrupt Enable!"
	#endif
	
	/*	Interrupt Flag	 			*/
	SET_BIT(ADCSRA,4);	//Clear Flag
  96:	86 b1       	in	r24, 0x06	; 6
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_Read>:

	
	
u16		ADC_Read	(u8 Channel)
{
	ADMUX |= (Channel & 0x1f);
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	8f 71       	andi	r24, 0x1F	; 31
  a2:	98 2b       	or	r25, r24
  a4:	97 b9       	out	0x07, r25	; 7
	
	u16	Local_u16Value = 0;
	
	/*	Start Single Conversion		*/
	SET_BIT(ADCSRA,6);	
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	86 b9       	out	0x06, r24	; 6
	
	/* wait till conversion is done		*/
	while	((GET_BIT(ADCSRA,4)) == 0);
  ac:	34 9b       	sbis	0x06, 4	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <ADC_Read+0xe>
	SET_BIT(ADCSRA,4);	//Clear Flag
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	86 b9       	out	0x06, r24	; 6
	
	/*	Read The Conversion Value	*/
	Local_u16Value = ADC;
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	95 b1       	in	r25, 0x05	; 5
	
	return Local_u16Value;
  ba:	08 95       	ret

000000bc <DIO_voidSetPinDirection>:


void	DIO_voidSetPinDirection(u8 Port ,u8 Pin , u8 Direction )
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	08 f0       	brcs	.+2      	; 0xc2 <DIO_voidSetPinDirection+0x6>
  c0:	72 c0       	rjmp	.+228    	; 0x1a6 <DIO_voidSetPinDirection+0xea>
  c2:	68 30       	cpi	r22, 0x08	; 8
  c4:	08 f0       	brcs	.+2      	; 0xc8 <DIO_voidSetPinDirection+0xc>
  c6:	6f c0       	rjmp	.+222    	; 0x1a6 <DIO_voidSetPinDirection+0xea>
	{
		if(Direction == OUTPUT)
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	a1 f5       	brne	.+104    	; 0x134 <DIO_voidSetPinDirection+0x78>
		{
			switch(Port)
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	89 f0       	breq	.+34     	; 0xf2 <DIO_voidSetPinDirection+0x36>
  d0:	28 f0       	brcs	.+10     	; 0xdc <DIO_voidSetPinDirection+0x20>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	c9 f0       	breq	.+50     	; 0x108 <DIO_voidSetPinDirection+0x4c>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	11 f1       	breq	.+68     	; 0x11e <DIO_voidSetPinDirection+0x62>
  da:	08 95       	ret
			{
				case PORTA :	SET_BIT(DDRA_REG,Pin);	break;
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_voidSetPinDirection+0x2c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_voidSetPinDirection+0x28>
  ec:	82 2b       	or	r24, r18
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	08 95       	ret
				case PORTB :	SET_BIT(DDRB_REG,Pin);	break;
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_voidSetPinDirection+0x42>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_voidSetPinDirection+0x3e>
 102:	82 2b       	or	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
				case PORTC :	SET_BIT(DDRC_REG,Pin);	break;
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinDirection+0x58>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinDirection+0x54>
 118:	82 2b       	or	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
				case PORTD :	SET_BIT(DDRD_REG,Pin);	break;
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_voidSetPinDirection+0x6e>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_voidSetPinDirection+0x6a>
 12e:	82 2b       	or	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
 132:	08 95       	ret
			}
		}
		else if (Direction == INPUT)
 134:	41 11       	cpse	r20, r1
 136:	37 c0       	rjmp	.+110    	; 0x1a6 <DIO_voidSetPinDirection+0xea>
		{
			switch(Port)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 f0       	breq	.+36     	; 0x160 <DIO_voidSetPinDirection+0xa4>
 13c:	28 f0       	brcs	.+10     	; 0x148 <DIO_voidSetPinDirection+0x8c>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	d9 f0       	breq	.+54     	; 0x178 <DIO_voidSetPinDirection+0xbc>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	29 f1       	breq	.+74     	; 0x190 <DIO_voidSetPinDirection+0xd4>
 146:	08 95       	ret
			{
				case PORTA :	CLR_BIT(DDRA_REG,Pin);	break;
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinDirection+0x98>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinDirection+0x94>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	08 95       	ret
				case PORTB :	CLR_BIT(DDRB_REG,Pin);	break;
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_voidSetPinDirection+0xb0>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_voidSetPinDirection+0xac>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	87 bb       	out	0x17, r24	; 23
 176:	08 95       	ret
				case PORTC :	CLR_BIT(DDRC_REG,Pin);	break;
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_voidSetPinDirection+0xc8>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_voidSetPinDirection+0xc4>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	84 bb       	out	0x14, r24	; 20
 18e:	08 95       	ret
				case PORTD :	CLR_BIT(DDRD_REG,Pin);	break;
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_voidSetPinDirection+0xe0>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_voidSetPinDirection+0xdc>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	81 bb       	out	0x11, r24	; 17
 1a6:	08 95       	ret

000001a8 <DIO_voidSetPinValue>:
	}
}
void	DIO_voidSetPinValue(u8 Port ,u8 Pin , u8 Value )
{
	/*		Range Check				*/
	if( (Port < 4) && (Pin < 8) )
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <DIO_voidSetPinValue+0x6>
 1ac:	72 c0       	rjmp	.+228    	; 0x292 <DIO_voidSetPinValue+0xea>
 1ae:	68 30       	cpi	r22, 0x08	; 8
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <DIO_voidSetPinValue+0xc>
 1b2:	6f c0       	rjmp	.+222    	; 0x292 <DIO_voidSetPinValue+0xea>
	{
		if(Value == HIGH)
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	a1 f5       	brne	.+104    	; 0x220 <DIO_voidSetPinValue+0x78>
		{
			switch(Port)
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	89 f0       	breq	.+34     	; 0x1de <DIO_voidSetPinValue+0x36>
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <DIO_voidSetPinValue+0x20>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	c9 f0       	breq	.+50     	; 0x1f4 <DIO_voidSetPinValue+0x4c>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	11 f1       	breq	.+68     	; 0x20a <DIO_voidSetPinValue+0x62>
 1c6:	08 95       	ret
			{
				case PORTA :	SET_BIT(PORTA_REG,Pin);	break;
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinValue+0x2c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinValue+0x28>
 1d8:	82 2b       	or	r24, r18
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	08 95       	ret
				case PORTB :	SET_BIT(PORTB_REG,Pin);	break;
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPinValue+0x42>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_voidSetPinValue+0x3e>
 1ee:	82 2b       	or	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
				case PORTC :	SET_BIT(PORTC_REG,Pin);	break;
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_voidSetPinValue+0x58>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_voidSetPinValue+0x54>
 204:	82 2b       	or	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
				case PORTD :	SET_BIT(PORTD_REG,Pin);	break;
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinValue+0x6e>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinValue+0x6a>
 21a:	82 2b       	or	r24, r18
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	08 95       	ret
			}
		}
		else if (Value == LOW)
 220:	41 11       	cpse	r20, r1
 222:	37 c0       	rjmp	.+110    	; 0x292 <DIO_voidSetPinValue+0xea>
		{
			switch(Port)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	91 f0       	breq	.+36     	; 0x24c <DIO_voidSetPinValue+0xa4>
 228:	28 f0       	brcs	.+10     	; 0x234 <DIO_voidSetPinValue+0x8c>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	d9 f0       	breq	.+54     	; 0x264 <DIO_voidSetPinValue+0xbc>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	29 f1       	breq	.+74     	; 0x27c <DIO_voidSetPinValue+0xd4>
 232:	08 95       	ret
			{
				case PORTA :	CLR_BIT(PORTA_REG,Pin);	break;
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinValue+0x98>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinValue+0x94>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
				case PORTB :	CLR_BIT(PORTB_REG,Pin);	break;
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0xb0>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0xac>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	88 bb       	out	0x18, r24	; 24
 262:	08 95       	ret
				case PORTC :	CLR_BIT(PORTC_REG,Pin);	break;
 264:	25 b3       	in	r18, 0x15	; 21
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinValue+0xc8>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinValue+0xc4>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
				case PORTD :	CLR_BIT(PORTD_REG,Pin);	break;
 27c:	22 b3       	in	r18, 0x12	; 18
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_voidSetPinValue+0xe0>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_voidSetPinValue+0xdc>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	82 bb       	out	0x12, r24	; 18
 292:	08 95       	ret

00000294 <main>:
//#include <util/delay.h>


int main(void)
{
	ADC_Init		();
 294:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
		
	u16	Local_Digital_Value=0;
	u16	Local_Analog_Value=0;
	
	DIO_voidSetPinDirection(PORTC,PIN2,OUTPUT);	//led0
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN7,OUTPUT);	//led1
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	67 e0       	ldi	r22, 0x07	; 7
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN3,OUTPUT);	//led2
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_voidSetPinDirection>
	
	DIO_voidSetPinValue(PORTC,PIN2,LOW);
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTC,PIN7,LOW);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	67 e0       	ldi	r22, 0x07	; 7
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTD,PIN3,LOW);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
	
    /* Replace with your application code */
    while (1) 
    {
		Local_Digital_Value = ADC_Read		(7);
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
		Local_Analog_Value = (Local_Digital_Value*5000UL)/1024;
 2da:	9c 01       	movw	r18, r24
 2dc:	a8 e8       	ldi	r26, 0x88	; 136
 2de:	b3 e1       	ldi	r27, 0x13	; 19
 2e0:	0e 94 b7 01 	call	0x36e	; 0x36e <__umulhisi3>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	07 2e       	mov	r0, r23
 2ea:	7a e0       	ldi	r23, 0x0A	; 10
 2ec:	b6 95       	lsr	r27
 2ee:	a7 95       	ror	r26
 2f0:	97 95       	ror	r25
 2f2:	87 95       	ror	r24
 2f4:	7a 95       	dec	r23
 2f6:	d1 f7       	brne	.-12     	; 0x2ec <main+0x58>
 2f8:	70 2d       	mov	r23, r0
		
		if (Local_Analog_Value <=1000)
 2fa:	89 3e       	cpi	r24, 0xE9	; 233
 2fc:	23 e0       	ldi	r18, 0x03	; 3
 2fe:	92 07       	cpc	r25, r18
 300:	80 f4       	brcc	.+32     	; 0x322 <main+0x8e>
		{
			DIO_voidSetPinValue(PORTC,PIN2,HIGH);	//led0
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTC,PIN7,LOW);	//led1
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTD,PIN3,LOW);	//led2
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
 320:	d9 cf       	rjmp	.-78     	; 0x2d4 <main+0x40>
		}
		
		else if (Local_Analog_Value <=4000 && Local_Analog_Value >1000 )
 322:	bc 01       	movw	r22, r24
 324:	69 5e       	subi	r22, 0xE9	; 233
 326:	73 40       	sbci	r23, 0x03	; 3
 328:	68 3b       	cpi	r22, 0xB8	; 184
 32a:	7b 40       	sbci	r23, 0x0B	; 11
 32c:	80 f4       	brcc	.+32     	; 0x34e <main+0xba>
		{
			DIO_voidSetPinValue(PORTC,PIN2,LOW);	//led0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTC,PIN7,HIGH);	//led1
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	67 e0       	ldi	r22, 0x07	; 7
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTD,PIN3,HIGH);	//led2
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	63 e0       	ldi	r22, 0x03	; 3
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
 34c:	c3 cf       	rjmp	.-122    	; 0x2d4 <main+0x40>
		}

		else
		{
			DIO_voidSetPinValue(PORTC,PIN2,HIGH);	//led0
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTC,PIN7,LOW);	//led1
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTD,PIN3,HIGH);	//led2
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinValue>
 36c:	b3 cf       	rjmp	.-154    	; 0x2d4 <main+0x40>

0000036e <__umulhisi3>:
 36e:	a2 9f       	mul	r26, r18
 370:	b0 01       	movw	r22, r0
 372:	b3 9f       	mul	r27, r19
 374:	c0 01       	movw	r24, r0
 376:	a3 9f       	mul	r26, r19
 378:	70 0d       	add	r23, r0
 37a:	81 1d       	adc	r24, r1
 37c:	11 24       	eor	r1, r1
 37e:	91 1d       	adc	r25, r1
 380:	b2 9f       	mul	r27, r18
 382:	70 0d       	add	r23, r0
 384:	81 1d       	adc	r24, r1
 386:	11 24       	eor	r1, r1
 388:	91 1d       	adc	r25, r1
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
